module Guillotine
  module Parser
    grammar SQLKeyValuePair
      include SQLPrimitives
    
      rule key_value_pair
        string optional_spaces joiner_or_null  {
          def eval
            results = joiner_or_null.eval
            klass = Expressions.find_class_for(results[:joiner])
            if value = results[:value]
              klass.new(string.eval.to_sym, results[:value])
            else
              klass.new(string.eval.to_sym)
            end
          end
        }
      end
    
      rule joiner_or_null
        a_null / joiner_with_value
      end
    
      rule a_null
        is_not_null / is_null
      end
    
      rule is_not_null
        "IS" space+ "NOT" space+ "NULL" {
          def eval
            { :joiner => :"IS NOT NULL" }
          end
        }
      end
    
      rule is_null
        "IS" space+ "NULL" {
          def eval
            { :joiner => :"IS NULL" }
          end
         }
      end
    
      rule joiner_with_value
        condition_joiner optional_spaces primitive {
          def eval
            { 
              :joiner => condition_joiner.eval,
              :value => primitive.eval
            }
          end
        }
      end
    
      rule condition_joiner
        greater_than_or_equal / 
        less_than_or_equal / 
        equals / 
        not_equals / 
        less_than / 
        greater_than
      end
    
      rule less_than_or_equal
        "<="  {   def eval;   :<=;   end }
      end
    
      rule greater_than_or_equal
        ">="  {   def eval;   :>=    end }
      end
    
      rule less_than
        "<"   {   def eval;   :<     end }
      end
    
      rule greater_than
        ">"   {   def eval;   :>     end }
      end
    
      rule not_equals
        "!="  {  def eval;   :"!="   end }
      end
    
      rule equals
        "="   {   def eval;  :"="    end }
      end
    end
  end
end