module Guillotine
  module Parser
    grammar SQLPrimitives
      include SQLHelpers
    
      rule primitive
        open_parens primitive close_parens {
           def eval
            simple_primitive.eval
          end
        }
        /
        simple_primitive
      end

      rule simple_primitive
        datetime / date / boolean / quoted_string / backtick_string / number / string
      end
    
      rule SPACE
        " "
      end
    
      rule optional_spaces
        SPACE*
      end
    
      rule boolean
        true / false
      end
    
      rule true
        "TRUE" {
          def eval
            true
          end
        }
      end
    
      rule false
        "FALSE" {
          def eval
            false
          end
        }
      end
    
      rule quoted_string
        single_quoted_string / double_quoted_string
      end
    
      rule single_quoted_string
        single_quote (string_chars / double_quote)* single_quote {
          def eval
            text_value[1..text_value.length-2]
          end
        }
      end
    
      rule single_quote
        "'"
      end
    
      rule double_quoted_string
        double_quote (string_chars / single_quote)* double_quote {
          def eval
            text_value[1..text_value.length-2]
          end
        }
      end
    
      rule double_quote
        "\""
      end

      rule backtick
        "`"
      end
    
      rule backtick_string
        backtick string backtick {
          def eval(backtick_string_class=BacktickString)
            backtick_string_class.new(text_value)
          end
        }
      end
    
      rule string
        string_chars+ {
          def eval
            text_value
          end
        }
      end
    
      rule string_chars
        [a-zA-Z_]
      end
    
      rule number
        float / integer
      end
    
      rule integer
        digit+ {
          def eval
            text_value.to_i
          end
        }
      end
    
      rule float
        integer "." integer {
          def eval
            text_value.to_f
          end
        }
      end

      rule digit
        [0-9]
      end

      rule date
        one:four_digits dash two:two_digits dash three:two_digits {
          def eval
            elements = [one.eval, two.eval, three.eval]
            Date.new(*elements)
          end
        }
      end

      rule four_digits
        two_digits two_digits {
          def eval; text_value.to_i; end
        }
      end

      rule two_digits
        digit digit {
          def eval; text_value.to_i; end
        }
      end
  
      rule dash
        "-" { def eval; nil; end }
      end

      rule datetime
        quote? date SPACE time quote? {
          def eval
            Time.parse(text_value)
          end
        }
      end

      rule time
        two_digits ":" two_digits ":" two_digits
      end

      rule quote
        single_quote / double_quote
      end
    end
  end
end